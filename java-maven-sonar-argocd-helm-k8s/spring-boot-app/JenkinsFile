pipeline {
  agent {
    docker {
      image 'jatinkishorem/docker-maven:v1'
      args '-v /var/run/docker.sock:/var/run/docker.sock -u root'
    }
  }

  environment {
    SONAR_URL = "http://54.174.95.88:9000"
    DOCKER_IMAGE = "jatinkishorem/java:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "JatinKishore"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/JatinKishore/Jenkins-Zero-To-Hero.git']]
        ])
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.host.url=$SONAR_URL
            '''
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh '''
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker build -t $DOCKER_IMAGE .
              docker push $DOCKER_IMAGE
            '''
          }
        }
      }
    }

    stage('Update Deployment File') {
      // Run this on Jenkins host to access .git
      agent any
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('.') {
            sh '''
              echo "üîç Location: $(pwd)"
              ls -a
              git config user.email "jatinkm02@gmail.com"
              git config user.name "JatinKishore"

              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "‚ö†Ô∏è No changes to commit"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
              exit 0
            '''
          }
        }
      }
    }
  }

  post {
    always {
      echo '‚úÖ Pipeline finished.'
    }
    failure {
      echo '‚ùå Pipeline failed.'
    }
  }
}
